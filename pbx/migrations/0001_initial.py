# Generated by Django 3.1.7 on 2021-03-30 18:02

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AsteriskPublication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('devicestate_publish', models.CharField(blank=True, max_length=40, null=True)),
                ('mailboxstate_publish', models.CharField(blank=True, max_length=40, null=True)),
                ('device_state', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('device_state_filter', models.CharField(blank=True, max_length=256, null=True)),
                ('mailbox_state', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('mailbox_state_filter', models.CharField(blank=True, max_length=256, null=True)),
            ],
            options={
                'db_table': 'ps_asterisk_publications',
            },
        ),
        migrations.CreateModel(
            name='Cdr',
            fields=[
                ('uniqueid', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='Unique ID')),
                ('calldate', models.DateTimeField()),
                ('clid', models.CharField(blank=True, max_length=80, null=True)),
                ('src', models.CharField(blank=True, max_length=80, null=True)),
                ('dst', models.CharField(blank=True, max_length=80, null=True)),
                ('dcontext', models.CharField(blank=True, max_length=80, null=True)),
                ('channel', models.CharField(blank=True, max_length=80, null=True)),
                ('dstchannel', models.CharField(blank=True, max_length=80, null=True)),
                ('lastapp', models.CharField(blank=True, max_length=80, null=True)),
                ('lastdata', models.CharField(blank=True, max_length=80, null=True)),
                ('duration', models.IntegerField(blank=True, default=0, null=True)),
                ('billsec', models.IntegerField(blank=True, default=0, null=True)),
                ('disposition', models.CharField(choices=[('ANSWERED', 'ANSWERED'), ('FAILED', 'FAILED'), ('NO ANSWER', 'NO ANSWER'), ('BUSY', 'BUSY'), ('DOCUMENTATION', 'DOCUMENTATION'), ('BILL', 'BILL'), ('IGNORE', 'IGNORE')], db_index=True, default='', max_length=45)),
                ('amaflags', models.PositiveIntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], db_index=True, default=0)),
                ('accountcode', models.CharField(blank=True, max_length=20, null=True)),
                ('userfield', models.CharField(blank=True, max_length=255, null=True)),
                ('did', models.CharField(blank=True, max_length=50, null=True)),
                ('recordingfile', models.CharField(blank=True, max_length=255, null=True)),
                ('cnum', models.CharField(blank=True, max_length=80, null=True)),
                ('cnam', models.CharField(blank=True, max_length=80, null=True)),
                ('outbound_cnum', models.CharField(blank=True, max_length=80, null=True)),
                ('outbound_cnam', models.CharField(blank=True, max_length=80, null=True)),
                ('dst_cnam', models.CharField(blank=True, max_length=80, null=True)),
            ],
            options={
                'db_table': 'cdr',
            },
        ),
        migrations.CreateModel(
            name='Cel',
            fields=[
                ('uniqueid', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='Unique ID')),
                ('eventtime', models.DateTimeField(auto_now_add=True, null=True)),
                ('eventtype', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('userdeftype', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('cid_name', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('cid_num', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('cid_ani', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('cid_rdnis', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('cid_dnid', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('exten', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('context', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('channame', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('appname', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('appdata', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('accountcode', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('peeraccount', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('linkedid', models.CharField(blank=True, default='', max_length=80, null=True)),
                ('amaflags', models.IntegerField(blank=True, default=0, null=True)),
                ('userfield', models.CharField(blank=True, default='', max_length=255, null=True)),
                ('peer', models.CharField(blank=True, default='', max_length=80, null=True)),
            ],
            options={
                'db_table': 'cel',
            },
        ),
        migrations.CreateModel(
            name='Contacts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uri', models.CharField(blank=True, max_length=511, null=True)),
                ('expiration_time', models.IntegerField(blank=True, null=True, verbose_name='expiration_time')),
                ('quality_frequency', models.IntegerField(blank=True, null=True, verbose_name='quality_frequency')),
                ('outbound_proxy', models.CharField(blank=True, max_length=40, null=True)),
                ('path', models.TextField(blank=True, null=True, verbose_name='path')),
                ('user_agent', models.CharField(blank=True, max_length=255, null=True)),
                ('quality_timeout', models.FloatField(blank=True, null=True, verbose_name='quality_timeout')),
                ('reg_server', models.CharField(blank=True, max_length=255, null=True)),
                ('authenticate_quality', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('via_addr', models.CharField(blank=True, max_length=40, null=True)),
                ('via_port', models.IntegerField(blank=True, null=True, verbose_name='expiration_time')),
                ('call_id', models.CharField(blank=True, max_length=255, null=True)),
                ('endpoint', models.CharField(blank=True, max_length=40, null=True)),
                ('prune_on_boot', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
            ],
            options={
                'db_table': 'ps_contacts',
            },
        ),
        migrations.CreateModel(
            name='Contexts',
            fields=[
                ('name', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='le contexte')),
                ('full_name', models.CharField(max_length=15, verbose_name='la description')),
                ('incoming', models.BooleanField(choices=[(True, 'Entrant'), (False, 'Sortant')], db_index=True, default=False, verbose_name='Entrant')),
            ],
            options={
                'db_table': 'contexts',
            },
        ),
        migrations.CreateModel(
            name='Endpoints_id_ips',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.CharField(blank=True, max_length=40, null=True)),
                ('match', models.CharField(blank=True, max_length=80, null=True)),
                ('srv_lookups', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('match_header', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'ps_endpoint_id_ips',
            },
        ),
        migrations.CreateModel(
            name='IvrDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('description', models.CharField(blank=True, max_length=150, null=True)),
                ('announcement', models.IntegerField(blank=True, null=True)),
                ('directdial', models.CharField(blank=True, max_length=50, null=True)),
                ('invalid_loops', models.CharField(blank=True, max_length=10, null=True)),
                ('invalid_retry_recording', models.CharField(blank=True, max_length=25, null=True)),
                ('invalid_destination', models.CharField(blank=True, max_length=50, null=True)),
                ('timeout_enabled', models.CharField(blank=True, max_length=50, null=True)),
                ('invalid_recording', models.CharField(blank=True, max_length=25, null=True)),
                ('retvm', models.CharField(blank=True, max_length=8, null=True)),
                ('timeout_time', models.IntegerField(blank=True, null=True)),
                ('timeout_recording', models.CharField(blank=True, max_length=25, null=True)),
                ('timeout_retry_recording', models.CharField(blank=True, max_length=25, null=True)),
                ('timeout_destination', models.CharField(blank=True, max_length=50, null=True)),
                ('timeout_loops', models.CharField(blank=True, max_length=10, null=True)),
                ('timeout_append_announce', models.IntegerField(blank=True, null=True)),
                ('invalid_append_announce', models.IntegerField(blank=True, null=True)),
                ('timeout_ivr_ret', models.IntegerField(blank=True, null=True)),
                ('invalid_ivr_ret', models.IntegerField(blank=True, null=True)),
                ('alertinfo', models.CharField(blank=True, max_length=150, null=True)),
                ('rvolume', models.CharField(blank=True, max_length=2, null=True)),
            ],
            options={
                'db_table': 'ivr_details',
            },
        ),
        migrations.CreateModel(
            name='Ps_aors',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Unique ID')),
                ('max_contacts', models.PositiveIntegerField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], verbose_name='max_contacts')),
                ('qualify_frequency', models.PositiveIntegerField(choices=[(30, 30), (40, 40), (50, 50), (60, 60)], verbose_name='Qualites de Frequence')),
                ('contact', models.CharField(blank=True, db_column='contact', max_length=255, null=True)),
                ('default_expiration', models.PositiveIntegerField(blank=True, null=True)),
                ('minimum_expiration', models.PositiveIntegerField(blank=True, null=True)),
                ('remove_existing', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('authenticate_qualify', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('maximum_expiration', models.PositiveIntegerField(blank=True, null=True)),
                ('outbound_proxy', models.CharField(blank=True, max_length=40, null=True)),
                ('support_path', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('qualify_timeout', models.FloatField(blank=True, null=True)),
                ('voicemail_extension', models.CharField(blank=True, max_length=40, null=True)),
            ],
            options={
                'db_table': 'ps_aors',
            },
        ),
        migrations.CreateModel(
            name='Ps_auths',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Unique ID')),
                ('auth_type', models.CharField(blank=True, help_text='userpass', max_length=200, null=True)),
                ('nonce_lifetime', models.PositiveIntegerField(blank=True, null=True)),
                ('md5_cred', models.CharField(blank=True, max_length=40, null=True)),
                ('password', models.CharField(blank=True, max_length=80, null=True)),
                ('realm', models.CharField(blank=True, max_length=40, null=True)),
                ('username', models.CharField(blank=True, help_text='101', max_length=40, null=True)),
                ('refresh_token', models.CharField(blank=True, max_length=255, null=True)),
                ('oauth_clientid', models.CharField(blank=True, max_length=255, null=True)),
                ('oauth_secret', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Ps_auths',
                'verbose_name_plural': 'Ps_auths',
                'db_table': 'ps_auths',
            },
        ),
        migrations.CreateModel(
            name='Queue',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Unique ID')),
                ('name', models.CharField(blank=True, max_length=128, null=True)),
                ('musiconhold', models.CharField(blank=True, choices=[('ring 1', 'ring 1'), ('ring 2', 'ring 2'), ('ring 3', 'ring 3'), ('ring 4', 'ring 4'), ('ring 5', 'ring 5'), ('ring 6', 'ring 6'), ('ring 7', 'ring 7'), ('ring 8', 'ring 8'), ('ring 9', 'ring 9'), ('ring 10', 'ring 10')], max_length=128, null=True)),
                ('announce', models.CharField(blank=True, max_length=128, null=True)),
                ('context', models.CharField(blank=True, max_length=128, null=True)),
                ('timeout', models.IntegerField(blank=True, null=True)),
                ('ringinuse', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('setinterfacevar', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('setqueueentryvar', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('monitor_format', models.CharField(blank=True, max_length=8, null=True)),
                ('membermacro', models.CharField(blank=True, max_length=512, null=True)),
                ('membergosub', models.CharField(blank=True, max_length=512, null=True)),
                ('queue_youarenext', models.CharField(blank=True, max_length=128, null=True)),
                ('queue_thereare', models.CharField(blank=True, max_length=128, null=True)),
                ('queue_callswaiting', models.CharField(blank=True, max_length=128, null=True)),
                ('queue_quantity1', models.CharField(blank=True, max_length=128, null=True)),
                ('queue_quantity2', models.CharField(blank=True, max_length=128, null=True)),
                ('queue_holdtime', models.CharField(blank=True, max_length=128, null=True)),
                ('queue_minutes', models.CharField(blank=True, max_length=128, null=True)),
                ('queue_minute', models.CharField(blank=True, max_length=128, null=True)),
                ('queue_seconds', models.CharField(blank=True, max_length=128, null=True)),
                ('queue_thankyou', models.CharField(blank=True, max_length=128, null=True)),
                ('queue_callerannonce', models.CharField(blank=True, max_length=128, null=True)),
                ('queue_reporthold', models.CharField(blank=True, max_length=128, null=True)),
                ('annonce_frequency', models.IntegerField(blank=True, null=True)),
                ('announce_to_first_user', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('min_announce_frequency', models.IntegerField(blank=True, null=True)),
                ('annonce_round_seconds', models.IntegerField(blank=True, null=True)),
                ('announce_holdtime', models.CharField(blank=True, max_length=128, null=True)),
                ('announce_position', models.CharField(blank=True, max_length=128, null=True)),
                ('announce_position_limit', models.IntegerField(blank=True, null=True)),
                ('periodic_announce', models.CharField(blank=True, max_length=50, null=True)),
                ('periodic_announce_frequency', models.IntegerField(blank=True, null=True)),
                ('relative_periodic_announce', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('random_periodic_announce', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('retry', models.IntegerField(blank=True, null=True)),
                ('wrapuptime', models.IntegerField(blank=True, null=True)),
                ('penaltymemberslimit', models.IntegerField(blank=True, null=True)),
                ('autofill', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('monitor_type', models.CharField(blank=True, max_length=128, null=True)),
                ('autopause', models.CharField(blank=True, choices=[('queue', 'queue'), ('autopause', 'autopause')], max_length=128, null=True)),
                ('autopausedelay', models.IntegerField(blank=True, null=True)),
                ('autopausebusy', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('autopauseunavail', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('maxlen', models.IntegerField(blank=True, null=True)),
                ('servicelevel', models.IntegerField(blank=True, null=True)),
                ('strategy', models.CharField(blank=True, choices=[('queue', 'queue'), ('strategy', 'strategy')], max_length=128, null=True)),
                ('joinemplty', models.CharField(blank=True, max_length=128, null=True)),
                ('leavewhenempty', models.CharField(blank=True, max_length=128, null=True)),
                ('reportholdtime', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('memberdelay', models.IntegerField(blank=True, null=True)),
                ('weight', models.IntegerField(blank=True, null=True)),
                ('timeoutrestart', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('defaultrule', models.CharField(blank=True, max_length=128, null=True)),
                ('timeoutpriority', models.CharField(blank=True, max_length=128, null=True)),
            ],
            options={
                'db_table': 'queues',
            },
        ),
        migrations.CreateModel(
            name='QueueMember',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Unique ID')),
                ('queue_name', models.CharField(blank=True, max_length=80, null=True)),
                ('interface', models.CharField(blank=True, max_length=80, null=True)),
                ('membername', models.CharField(blank=True, max_length=80, null=True)),
                ('state_interface', models.CharField(blank=True, max_length=80, null=True)),
                ('penalty', models.IntegerField(blank=True, null=True)),
                ('paused', models.IntegerField(blank=True, null=True)),
                ('uniqueid', models.IntegerField(blank=True, null=True)),
                ('wrapuptime', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'queue_members',
            },
        ),
        migrations.CreateModel(
            name='QueueRules',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Unique ID')),
                ('rule_name', models.CharField(blank=True, max_length=80, null=True)),
                ('time', models.CharField(blank=True, max_length=32, null=True)),
                ('min_penalty', models.CharField(blank=True, max_length=32, null=True)),
                ('max_penalty', models.CharField(blank=True, max_length=32, null=True)),
            ],
            options={
                'db_table': 'queues_rules',
            },
        ),
        migrations.CreateModel(
            name='QueuesConfig',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Unique ID')),
                ('extension', models.CharField(blank=True, max_length=20, null=True)),
                ('descr', models.CharField(blank=True, max_length=35, null=True)),
                ('grppre', models.CharField(blank=True, max_length=100, null=True)),
                ('alertinfo', models.CharField(blank=True, max_length=254, null=True)),
                ('ringing', models.IntegerField(blank=True, null=True)),
                ('maxwait', models.CharField(blank=True, max_length=8, null=True)),
                ('password', models.CharField(blank=True, max_length=20, null=True)),
                ('ivr_id', models.CharField(blank=True, max_length=8, null=True)),
                ('dest', models.CharField(blank=True, max_length=50, null=True)),
                ('cwignore', models.IntegerField(blank=True, null=True)),
                ('queuewait', models.IntegerField(blank=True, null=True)),
                ('use_queue_context', models.IntegerField(blank=True, null=True)),
                ('togglehint', models.IntegerField(blank=True, null=True)),
                ('qnoanswer', models.IntegerField(blank=True, null=True)),
                ('callconfirm', models.IntegerField(blank=True, null=True)),
                ('callconfirm_id', models.IntegerField(blank=True, null=True)),
                ('qregex', models.CharField(blank=True, max_length=255, null=True)),
                ('agentannounce_id', models.IntegerField(blank=True, null=True)),
                ('joinannounce_id', models.IntegerField(blank=True, null=True)),
                ('monitor_type', models.CharField(blank=True, max_length=5, null=True)),
                ('monitor_heard', models.IntegerField(blank=True, null=True)),
                ('monitor_spoken', models.IntegerField(blank=True, null=True)),
                ('callback_id', models.CharField(blank=True, max_length=8, null=True)),
            ],
            options={
                'db_table': 'queues_config',
            },
        ),
        migrations.CreateModel(
            name='VoiceMail',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Unique ID')),
                ('uniqueid', models.IntegerField(blank=True, null=True)),
                ('mailbox', models.CharField(blank=True, max_length=80, null=True)),
                ('password', models.CharField(blank=True, max_length=80, null=True)),
                ('fullname', models.CharField(blank=True, max_length=80, null=True)),
                ('alias', models.CharField(blank=True, max_length=80, null=True)),
                ('email', models.CharField(blank=True, max_length=80, null=True)),
                ('pager', models.CharField(blank=True, max_length=80, null=True)),
                ('attach', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('attachfmt', models.CharField(blank=True, max_length=10, null=True)),
                ('servermail', models.CharField(blank=True, max_length=80, null=True)),
                ('language', models.CharField(blank=True, max_length=20, null=True)),
                ('tz', models.CharField(blank=True, max_length=30, null=True)),
                ('deletevoicemail', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('sayid', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('saycid', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('sendvoicemail', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('review', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('tempgreetwarn', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('operator', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('envelope', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=128, null=True)),
                ('sayduration', models.IntegerField(blank=True, null=True)),
                ('forcename', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=200, null=True)),
                ('forcegreetings', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=200, null=True)),
                ('callback', models.CharField(blank=True, max_length=80, null=True)),
                ('dialout', models.CharField(blank=True, max_length=80, null=True)),
                ('exitcontext', models.CharField(blank=True, max_length=80, null=True)),
                ('maxmsg', models.IntegerField(blank=True, null=True)),
                ('volgain', models.IntegerField(blank=True, null=True)),
                ('imapuser', models.CharField(blank=True, max_length=80, null=True)),
                ('imappassword', models.CharField(blank=True, max_length=80, null=True)),
                ('imapserver', models.CharField(blank=True, max_length=80, null=True)),
                ('imapport', models.CharField(blank=True, max_length=8, null=True)),
                ('imapflags', models.CharField(blank=True, max_length=80, null=True)),
                ('stamp', models.DateTimeField(auto_now_add=True)),
                ('context', models.ForeignKey(blank=True, db_column='context', help_text='le contexte', null=True, on_delete=django.db.models.deletion.CASCADE, to='pbx.contexts')),
            ],
            options={
                'db_table': 'voicemail',
            },
        ),
        migrations.CreateModel(
            name='Sippeers',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Unique ID')),
                ('name', models.CharField(help_text='Numéro', max_length=15)),
                ('ipaddr', models.GenericIPAddressField(blank=True, help_text='Addresse IP', null=True)),
                ('port', models.PositiveIntegerField(blank=True, help_text='Port de clients non dynamiques', null=True)),
                ('regseconds', models.BigIntegerField(blank=True, help_text='regseconds', null=True)),
                ('defaultuser', models.CharField(blank=True, help_text='Le serveur Asterisk enverra des INVITE à username@defaultip', max_length=15, null=True)),
                ('fullcontact', models.CharField(blank=True, help_text='fullcontact', max_length=100, null=True)),
                ('regserver', models.CharField(blank=True, help_text='regserver', max_length=20, null=True)),
                ('useragent', models.CharField(blank=True, help_text='useragent', max_length=20, null=True)),
                ('lastms', models.CharField(blank=True, help_text='lastms', max_length=100, null=True)),
                ('host', models.CharField(blank=True, default='dynamic', help_text="Liaison à un hôte ou une adresse IP spécifique, ou 'dynamique '", max_length=25, null=True)),
                ('type', models.CharField(blank=True, choices=[('friend', 'friend'), ('peer', 'peer'), ('user', 'user')], default='friend', help_text="Type d'utilisateur", max_length=8, null=True)),
                ('permit', models.CharField(blank=True, help_text='sous-réseaux autorisés', max_length=25, null=True)),
                ('deny', models.CharField(blank=True, help_text='sous-réseaux interdits', max_length=25, null=True)),
                ('secret', models.CharField(blank=True, help_text='Laisser vide pour générer', max_length=15, null=True)),
                ('md5secret', models.CharField(blank=True, max_length=40, null=True)),
                ('remotesecret', models.CharField(blank=True, max_length=40, null=True)),
                ('dtmfmode', models.CharField(blank=True, choices=[('rfc2833', 'rfc2833'), ('info', 'info'), ('shortinfo', 'shortinfo'), ('inband', 'inband'), ('auto', 'auto')], help_text="En mode automatique, Asterisk utilisera le mode rfc2833 pour la transmission DTMF, par défaut, mais passera en mode intrabande pour les signaux DTMF, si le client distant n`'indique pas dans le message SDP qu'il prend en charge le mode de transmission DTMF - rfc2833", max_length=10, null=True)),
                ('transport', models.CharField(blank=True, choices=[('transport-udp', 'transport-udp'), ('transport-tcp', 'transport-tcp')], help_text='Transport des données', max_length=40, null=True)),
                ('directmedia', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no'), ('nonat', 'nonat'), ('update', 'update')], default='no', help_text='Autoriser ou non le trafic direct', max_length=6, null=True)),
                ('nat', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no'), ('never', 'never'), ('route', 'route')], default='no', help_text='Autoriser ou non le travail via NAT', max_length=5, null=True)),
                ('callgroup', models.CharField(blank=True, help_text='callgroup', max_length=40, null=True)),
                ('pickupgroup', models.CharField(blank=True, max_length=40, null=True)),
                ('language', models.CharField(blank=True, max_length=40, null=True)),
                ('disallow', models.CharField(default='all', help_text='codecs interdits', max_length=40, null=True)),
                ('allow', models.CharField(default='alaw', help_text='codecs autorisés', max_length=40, null=True)),
                ('insecure', models.CharField(blank=True, choices=[('port', "Ignorez le numéro de port d'où provient l'authentification"), ('invite', "Ne nécessite pas d'INVITATION initiale pour l'authentification"), ('port,invite', "N'exigez pas l'INVITE initiale pour l'authentification et ignorez le port d'où provient la demande")], default='', help_text='ignorer', max_length=20, null=True)),
                ('trustrpid', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], default='no', help_text="Puis-je faire confiance à l'ID de partie distante reçu du client SIP", max_length=3, null=True)),
                ('progressinband', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no'), ('never', 'never')], default='', help_text='ignorer', max_length=20, null=True)),
                ('promiscredir', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('useclientcode', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('accountcode', models.CharField(blank=True, max_length=40, null=True)),
                ('setvar', models.CharField(blank=True, max_length=40, null=True)),
                ('callerid', models.CharField(blank=True, max_length=40, null=True)),
                ('amaflags', models.CharField(blank=True, max_length=40, null=True)),
                ('callcounter', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('busylevel', models.PositiveIntegerField(blank=True, null=True)),
                ('allowoverlap', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('allowsubscribe', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('videosupport', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('maxcallbitrate', models.PositiveIntegerField(blank=True, null=True)),
                ('rfc2833compensate', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('mailbox', models.CharField(blank=True, max_length=40, null=True)),
                ('session_timers', models.CharField(blank=True, choices=[('accept', 'accept'), ('refuse', 'refuse'), ('originate', 'originate')], db_column='session-timers', max_length=10, null=True)),
                ('session_expires', models.PositiveIntegerField(blank=True, db_column='session-expires', null=True)),
                ('session_minse', models.PositiveIntegerField(blank=True, db_column='session-minse', null=True)),
                ('session_refresher', models.CharField(blank=True, choices=[('uac', 'uac'), ('uas', 'uas')], db_column='session-refresher', max_length=3, null=True)),
                ('t38pt_usertpsource', models.CharField(blank=True, max_length=40, null=True)),
                ('regexten', models.CharField(blank=True, max_length=40, null=True)),
                ('fromdomain', models.CharField(blank=True, max_length=40, null=True)),
                ('fromuser', models.CharField(blank=True, max_length=40, null=True)),
                ('qualify', models.CharField(blank=True, max_length=40, null=True)),
                ('defaultip', models.CharField(blank=True, max_length=40, null=True)),
                ('rtptimeout', models.PositiveIntegerField(blank=True, null=True)),
                ('rtpholdtimeout', models.PositiveIntegerField(blank=True, null=True)),
                ('sendrpid', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('outboundproxy', models.CharField(blank=True, max_length=40, null=True)),
                ('callbackextension', models.CharField(blank=True, max_length=40, null=True)),
                ('timert1', models.PositiveIntegerField(blank=True, null=True)),
                ('timerb', models.PositiveIntegerField(blank=True, null=True)),
                ('qualifyfreq', models.PositiveIntegerField(blank=True, null=True)),
                ('constantssrc', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('contactpermit', models.CharField(blank=True, max_length=40, null=True)),
                ('contactdeny', models.CharField(blank=True, max_length=40, null=True)),
                ('usereqphone', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('textsupport', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('faxdetect', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('buggymwi', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('auth', models.CharField(blank=True, max_length=40, null=True)),
                ('fullname', models.CharField(blank=True, max_length=40, null=True)),
                ('trunkname', models.CharField(blank=True, max_length=40, null=True)),
                ('cid_number', models.CharField(blank=True, max_length=40, null=True)),
                ('callingpres', models.CharField(blank=True, choices=[('allowed_not_screened', 'allowed_not_screened'), ('allowed_passed_screen', 'allowed_passed_screen'), ('allowed_failed_screen', 'allowed_failed_screen'), ('allowed', 'allowed'), ('prohib_not_screened', 'prohib_not_screened'), ('prohib_passed_screen', 'prohib_passed_screen'), ('prohib_failed_screen', 'prohib_failed_screen'), ('prohib', 'prohib')], help_text='callingpres', max_length=25, null=True)),
                ('mohinterpret', models.CharField(blank=True, max_length=40, null=True)),
                ('mohsuggest', models.CharField(blank=True, max_length=40, null=True)),
                ('parkinglot', models.CharField(blank=True, max_length=40, null=True)),
                ('hasvoicemail', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('subscribemwi', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('vmexten', models.CharField(blank=True, max_length=40, null=True)),
                ('autoframing', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('rtpkeepalive', models.PositiveIntegerField(blank=True, null=True)),
                ('call_limit', models.PositiveIntegerField(blank=True, db_column='call-limit', null=True)),
                ('g726nonstandard', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('ignoresdpversion', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('allowtransfer', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('dynamic', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('context', models.ForeignKey(blank=True, db_column='context', help_text='le contexte', null=True, on_delete=django.db.models.deletion.CASCADE, to='pbx.contexts')),
            ],
            options={
                'db_table': 'sippeers',
            },
        ),
        migrations.CreateModel(
            name='Sip_conf',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Unique ID')),
                ('name', models.CharField(help_text='Numéro', max_length=15)),
                ('host', models.CharField(default='dynamic', help_text="Liaison à un hôte ou une adresse IP spécifique, ou 'dynamique '", max_length=25)),
                ('nat', models.CharField(choices=[('yes', 'yes'), ('no', 'no'), ('never', 'never'), ('route', 'route')], default='no', help_text='Autoriser ou non le travail via NAT', max_length=5)),
                ('type', models.CharField(choices=[('friend', 'friend'), ('peer', 'peer'), ('user', 'user')], default='friend', help_text="Type d'utilisateur", max_length=8)),
                ('accountcode', models.CharField(blank=True, max_length=20, null=True)),
                ('amaflags', models.CharField(choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], default='billing', help_text='indicateurs spéciaux pour contrôler le calcul par défaut', max_length=20)),
                ('callgroup', models.CharField(blank=True, help_text='callgroup', max_length=40, null=True)),
                ('callerid', models.CharField(blank=True, help_text="Laisser vide pour l'auto-substitution", max_length=250, null=True)),
                ('cancallforward', models.CharField(choices=[('yes', 'yes'), ('no', 'no')], default='yes', help_text="autoriser ou non le transfert d'appel", max_length=3)),
                ('directmedia', models.CharField(choices=[('yes', 'yes'), ('no', 'no'), ('nonat', 'nonat'), ('update', 'update')], default='no', help_text='Autoriser ou non le trafic direct', max_length=6)),
                ('defaultip', models.CharField(blank=True, help_text="Si vous connaissez l'adresse IP du téléphone, vous pouvez la saisir ici. Ces paramètres seront utilisés lors des appels vers ce téléphone s'il n'est pas déjà enregistré auprès du serveur. Après l'enregistrement, le téléphone lui-même indiquera à Asterisk sous quel nom d'utilisateur et quelle adresse IP il est disponible.", max_length=25, null=True)),
                ('dtmfmode', models.CharField(choices=[('rfc2833', 'rfc2833'), ('info', 'info'), ('shortinfo', 'shortinfo'), ('inband', 'inband'), ('auto', 'auto')], help_text="En mode automatique, Asterisk utilisera le mode rfc2833 pour la transmission DTMF, par défaut, mais passera en mode intrabande pour les signaux DTMF, si le client distant n`'indique pas dans le message SDP qu'il prend en charge le mode de transmission DTMF - rfc2833", max_length=10)),
                ('fromuser', models.CharField(blank=True, max_length=80, null=True)),
                ('fromdomain', models.CharField(blank=True, max_length=80, null=True)),
                ('insecure', models.CharField(blank=True, choices=[('port', "Ignorez le numéro de port d'où provient l'authentification"), ('invite', "Ne nécessite pas d'INVITATION initiale pour l'authentification"), ('port,invite', "N'exigez pas l'INVITE initiale pour l'authentification et ignorez le port d'où provient la demande")], default='', help_text='ignorer', max_length=20, null=True)),
                ('language', models.CharField(default='fr', help_text='langue', max_length=2)),
                ('mailbox', models.CharField(help_text="Laisser vide pour l'auto-substitution", max_length=15, null=True)),
                ('md5secret', models.CharField(blank=True, help_text='Mot de passe MD5', max_length=80, null=True)),
                ('deny', models.CharField(blank=True, help_text='sous-réseaux interdits', max_length=25, null=True)),
                ('permit', models.CharField(blank=True, help_text='sous-réseaux autorisés', max_length=25, null=True)),
                ('mask', models.CharField(blank=True, help_text='obsolète', max_length=25, null=True)),
                ('musiconhold', models.CharField(blank=True, choices=[('ring 1', 'ring 1'), ('ring 2', 'ring 2'), ('ring 3', 'ring 3'), ('ring 4', 'ring 4'), ('ring 5', 'ring 5'), ('ring 6', 'ring 6'), ('ring 7', 'ring 7'), ('ring 8', 'ring 8'), ('ring 9', 'ring 9'), ('ring 10', 'ring 10')], db_column='musiconhold', db_index=True, help_text='musique en attente', max_length=100, null=True)),
                ('pickupgroup', models.CharField(blank=True, max_length=80, null=True)),
                ('qualify', models.CharField(choices=[('yes', 'yes'), ('no', 'no')], default='no', help_text="si oui, Asterisk enverra périodiquement (une fois toutes les 2 secondes) un message OPTIONS SIP pour vérifier que cet appareil fonctionne et qu'il est disponible pour passer des appels. Si un appareil donné ne répond pas dans un délai spécifié, Asterisk considère que cet appareil est éteint et indisponible pour passer des appels.", max_length=5)),
                ('regexten', models.CharField(blank=True, max_length=80, null=True)),
                ('restrictcid', models.CharField(blank=True, help_text='obsolète', max_length=25, null=True)),
                ('rtptimeout', models.CharField(blank=True, max_length=3, null=True)),
                ('rtpholdtimeout', models.CharField(blank=True, max_length=3, null=True)),
                ('secret', models.CharField(blank=True, help_text='Laisser vide pour générer', max_length=15)),
                ('setvar', models.CharField(blank=True, help_text='obsolète', max_length=25, null=True)),
                ('disallow', models.CharField(default='all', help_text='codecs interdits', max_length=100)),
                ('allow', models.CharField(default='alaw', help_text='codecs autorisés', max_length=100)),
                ('comment', models.TextField(blank=True, help_text='commenter', null=True)),
                ('trustrpid', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], default='no', help_text="Puis-je faire confiance à l'ID de partie distante reçu du client SIP", max_length=3, null=True)),
                ('sendrpid', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], default='yes', help_text='Il est nécessaire de transférer le SIP vers le client Remote-Party-ID', max_length=3, null=True)),
                ('videosupport', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], default='no', help_text='Support vidéo', max_length=3, null=True)),
                ('fullcontact', models.CharField(blank=True, help_text='fullcontact', max_length=80, null=True)),
                ('ipaddr', models.GenericIPAddressField(blank=True, help_text='Pour la compatibilité', null=True)),
                ('port', models.PositiveIntegerField(blank=True, help_text='Port de clients non dynamiques', null=True)),
                ('regseconds', models.BigIntegerField(blank=True, help_text='Pour la compatibilité', null=True)),
                ('username', models.CharField(blank=True, help_text='username', max_length=100, null=True)),
                ('regserver', models.CharField(blank=True, help_text='regserver', max_length=100, null=True)),
                ('useragent', models.CharField(blank=True, help_text='useragent', max_length=100, null=True)),
                ('lastms', models.CharField(blank=True, help_text='lastms', max_length=100, null=True)),
                ('defaultuser', models.CharField(blank=True, help_text='Le serveur Asterisk enverra des INVITE à username@defaultip', max_length=15, null=True)),
                ('context', models.ForeignKey(blank=True, db_column='context', help_text='le contexte', null=True, on_delete=django.db.models.deletion.CASCADE, to='pbx.contexts')),
            ],
            options={
                'db_table': 'sip_conf',
            },
        ),
        migrations.CreateModel(
            name='Extensions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exten', models.CharField(blank=True, db_index=True, help_text='exten / template', max_length=40, null=True)),
                ('priority', models.IntegerField(blank=True, help_text='priorité', null=True)),
                ('app', models.CharField(blank=True, choices=[('Dial', '(Dial) Compose le numéro'), ('HangUp', '(HangUp) Posez le téléphone'), ('Wait', '(Wait) Attendez x secondes'), ('Answer', '(Answer) Décrocher le téléphone'), ('AddQueueMember', "AddQueueMember (file d'attente, canal) Supprimer du groupe"), ('Queue', "Queue (queue_name) Aller à la file d'attente"), ('PlayBack', '(PlayBack) Lire le fichier son'), ('Set', '(Set) Définir la variable'), ('Read', '(Read) Lisez le clav en changement.'), ('BackGround', '(BackGround) Jouez le son et attendez prolongé'), ('Bridge', '(Bridge) Faire un pont de 2 canaux'), ('Busy', '(Busy) Retour occupé'), ('ChangeMonitor', '(ChangeMonitor) Tour. surveiller le fichier de canal'), ('Congestion', '(Congestion) Direction surchargée'), ('DBdel', '(DBdel) Supprimer la clé de int. DB'), ('DBdeltree', "(DBdeltree) Supprimer l'arbre de l'ext. DB"), ('Echo', '(Echo) Jouer audible'), ('ConfBridge', '(ConfBridge) Créer un pont de conférence'), ('Exec', '(Exec) Exécutez adj. plan de numérotation'), ('ExecIf', '(ExecIf) Exécutez si'), ('ExecIfTime', '(ExecIfTime) Exécuter if + time'), ('GoSub', "GoSub([[context|]extension|]priority) Aller à l'extension puis revenir"), ('GoTo', "GoTo([[context|]extension|]priority) Aller à l'extension"), ('GoToIf', 'GoToIf(condition?context1,extension1,priority1:context2,extension2,priority2)'), ('GotoIfTime', '(GotoIfTime) Allez ext. si + temps'), ('ImportVar', '(ImportVar) Importer une variable dans une nouvelle'), ('Incomplete', '(Incomplete) Revenir insatisfait'), ('Macro', '(Macro) Exécuter la macro'), ('MacroExclusive', '(MacroExclusive) Exécuter. une seule macro'), ('MacroIf', '(MacroIf) Macro si'), ('Monitor', '(Monitor) Surveillance des canaux'), ('StopMonitor', '(StopMonitor) Arrêter la surveillance des canaux'), ('MSet', '(MSet) Const. variables de canal'), ('MusicOnHold', '(MusicOnHold)Écouter de la musique en attente'), ('NoCDR', "(NoCDR) N'écrivez pas de CDR"), ('NoOp', '(NoOp) Rien à faire'), ('Park', '(Park) se garer'), ('MeetMeChannelAdmin', '(MeetMeChannelAdmin) Administration des canaux'), ('ParkedCall', '(ParkedCall) Répondre à garé'), ('PauseMonitor', '(PauseMonitor) Mettre le moniteur en pause'), ('Proceeding', "(Proceeding) L'appel est passé"), ('Progress', '(Progress) Appel en cours'), ('RaiseException', '(RaiseException) Lancer une exception'), ('ReadExten', '(ReadExten) Lire le numéro depuis AC'), ('ReadFile', '(ReadFile) Autre fichier en perm. canaliser'), ('MeetMeAdmin', '(MeetMeAdmin) Administration de la salle'), ('Record', '(Record) Ecrire un fichier'), ('ResetCDR', '(ResetCDR) Réinitialiser le CDR'), ('RetryDial', "(RetryDial) Recomposer en cas d'échec"), ('RemoveQueueMember', 'RemoveQueueMember(queue,channel) Ajouter au groupe'), ('Ringing', '(Ringing) Le téléphone sonne'), ('SayAlpha', '(SayAlpha) Dites à Alpha'), ('SayDigits', '(SayDigits) Énoncez les nombres'), ('SayNumber', '(SayNumber) Numéro de conversation'), ('SayPhonetic', '(SayPhonetic) Parlez phonétiquement'), ('SendFAX', '(SendFAX) Envoyer un fax'), ('ReceiveFAX', '(ReceiveFAX) Recevoir un fax'), ('SetAMAFlags', '(SetAMAFlags) Définir le drapeau AMA'), ('SetCallerPres', "(SetCallerPres) Définir l'affichage de l'ID de l'appelant"), ('SetMusicOnHold', '(SetMusicOnHold) Installez des muses. attentes'), ('SIPAddHeader', '(SIPAddHeader) Âge. ish. zag. sip package'), ('SIPDtmfMode', '(SIPDtmfMode) Changer le mode DTMF'), ('SIPRemoveHeader', '(SIPRemoveHeader) Ud. ish. zag. sip package'), ('StartMusicOnHold', '(StartMusicOnHold) Commencez à jouer à MOH'), ('MeetMeCount', '(MeetMeCount) Contrer'), ('Transfer', '(Transfer) Transférer un appel vers un numéro'), ('TryExec', "(TryExec) Essayez d'exécuter"), ('TrySystem', "(TrySystem) Essayez d'exécuter. UNIX"), ('System', '(System) Exécuter la commande UNIX'), ('UnpauseMonitor', '(UnpauseMonitor) Réactiver le moniteur'), ('WaitExten', '(WaitExten) Attendez un autre'), ('WaitMusicOnHold', "(WaitMusicOnHold) Attendez l'ajout. jouer à MOH"), ('MeetMe', '(MeetMe) Application de conférence'), ('SLAStation', '(SLAStation) Exécuter la ligne partagée'), ('SLATrunk', '(SLATrunk) Apparence de ligne partagée')], db_index=True, help_text='application de plan de numérotation', max_length=40, null=True)),
                ('appdata', models.CharField(blank=True, db_index=True, help_text="paramètres d'application", max_length=256, null=True)),
                ('context', models.ForeignKey(blank=True, db_column='context', max_length=40, null=True, on_delete=django.db.models.deletion.CASCADE, to='pbx.contexts')),
            ],
            options={
                'db_table': 'extensions',
            },
        ),
        migrations.CreateModel(
            name='Endpoints',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Unique ID')),
                ('transport', models.CharField(choices=[('transport-udp', 'transport-udp'), ('transport-tcp', 'transport-tcp')], max_length=40, null=True, verbose_name='transport')),
                ('aors', models.PositiveIntegerField(db_column='aors', help_text='101', unique=True)),
                ('auth', models.PositiveIntegerField(db_column='auth', help_text='101', unique=True)),
                ('disallow', models.CharField(blank=True, choices=[('all', 'all'), ('alaw', 'alaw'), ('disallow', 'disallow')], default='all', max_length=200, null=True)),
                ('allow', models.CharField(blank=True, choices=[('all', 'all'), ('alaw', 'alaw'), ('disallow', 'disallow')], default='all', max_length=200, null=True)),
                ('direct_media', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('deny', models.CharField(blank=True, default='0.0.0.0/0', max_length=95, null=True, verbose_name='sous-réseaux interdits')),
                ('permit', models.CharField(blank=True, default='0.0.0.0/0', max_length=95, null=True, verbose_name='sous-réseaux autorisés')),
                ('mailboxes', models.CharField(help_text='100@default', max_length=40, null=True)),
                ('connected_line_method', models.CharField(blank=True, help_text='pjsip_connected_line_method_values', max_length=100, null=True)),
                ('direct_media_method', models.CharField(blank=True, help_text='pjsip_connected_line_method_values', max_length=100, null=True)),
                ('direct_media_glare_mitigation', models.CharField(blank=True, help_text='pjsip_direct_media_glare_mitigation_values', max_length=100, null=True)),
                ('disable_direct_media_on_nat', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('dtmf_mode', models.CharField(blank=True, help_text='pjsip_dtmf_mode_values_v3', max_length=100, null=True)),
                ('external_media_address', models.CharField(blank=True, max_length=40, null=True)),
                ('force_rport', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('ice_support', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('identify_by', models.CharField(blank=True, max_length=40, null=True)),
                ('moh_suggest', models.CharField(blank=True, max_length=40, null=True)),
                ('outbound_auth', models.CharField(blank=True, max_length=40, null=True)),
                ('outbound_proxy', models.CharField(blank=True, max_length=40, null=True)),
                ('rewrite_contact', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('rtp_ipv6', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('rtp_symmetric', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('send_diversion', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('send_pai', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('send_rpid', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('timers_min_se', models.PositiveIntegerField(blank=True, null=True)),
                ('timers', models.CharField(blank=True, help_text='pjsip_timer_values', max_length=100, null=True)),
                ('timers_sess_expires', models.PositiveIntegerField(blank=True, null=True)),
                ('callerid', models.CharField(blank=True, max_length=40, null=True)),
                ('callerid_privacy', models.CharField(blank=True, help_text='pjsip_cid_privacy_values', max_length=100, null=True)),
                ('callerid_tag', models.CharField(blank=True, max_length=40, null=True)),
                ('r100rel', models.CharField(blank=True, db_column='100rel', help_text='pjsip_100rel_values', max_length=100, null=True)),
                ('aggregate_mwi', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('trust_id_inbound', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('trust_id_outbound', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('use_ptime', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('use_avpf', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('media_encryption', models.CharField(blank=True, help_text='pjsip_media_encryption_values', max_length=100, null=True)),
                ('inband_progress', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('call_group', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('pickup_group', models.CharField(blank=True, max_length=40, null=True)),
                ('named_call_group', models.CharField(blank=True, max_length=40, null=True)),
                ('named_pickup_group', models.CharField(blank=True, max_length=40, null=True)),
                ('device_state_busy_at', models.PositiveIntegerField(blank=True, null=True)),
                ('fax_detect', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('t38_udptl', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('t38_udptl_ec', models.CharField(blank=True, help_text='pjsip_t38udptl_ec_values', max_length=100, null=True)),
                ('t38_udptl_maxdatagram', models.PositiveIntegerField(blank=True, null=True)),
                ('t38_udptl_nat', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('t38_udptl_ipv6', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('tone_zone', models.CharField(blank=True, max_length=40, null=True)),
                ('language', models.CharField(blank=True, max_length=40, null=True)),
                ('one_touch_recording', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('record_on_feature', models.CharField(blank=True, max_length=40, null=True)),
                ('record_off_feature', models.CharField(blank=True, max_length=40, null=True)),
                ('rtp_engine', models.CharField(blank=True, max_length=40, null=True)),
                ('allow_transfer', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('allow_subscribe', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('sdp_owner', models.CharField(blank=True, max_length=40, null=True)),
                ('sdp_session', models.CharField(blank=True, max_length=40, null=True)),
                ('tos_audio', models.CharField(blank=True, max_length=10, null=True)),
                ('tos_video', models.CharField(blank=True, max_length=10, null=True)),
                ('sub_min_expiry', models.PositiveIntegerField(blank=True, null=True)),
                ('from_domain', models.CharField(blank=True, max_length=40, null=True)),
                ('from_user', models.CharField(blank=True, max_length=40, null=True)),
                ('mwi_from_user', models.CharField(blank=True, max_length=40, null=True)),
                ('dtls_verify', models.CharField(blank=True, max_length=40, null=True)),
                ('dtls_rekey', models.CharField(blank=True, max_length=40, null=True)),
                ('dtls_cert_file', models.CharField(blank=True, max_length=200, null=True)),
                ('dtls_private_key', models.CharField(blank=True, max_length=200, null=True)),
                ('dtls_cipher', models.CharField(blank=True, max_length=200, null=True)),
                ('dtls_ca_file', models.CharField(blank=True, max_length=200, null=True)),
                ('dtls_ca_path', models.CharField(blank=True, max_length=200, null=True)),
                ('dtls_setup', models.CharField(blank=True, help_text='pjsip_dtls_setup_values', max_length=200, null=True)),
                ('srtp_tag_32', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('media_address', models.CharField(blank=True, max_length=40, null=True)),
                ('redirect_method', models.CharField(blank=True, help_text='pjsip_redirect_method_values', max_length=200, null=True)),
                ('set_var', models.TextField(blank=True, null=True)),
                ('cos_audio', models.PositiveIntegerField(blank=True, null=True)),
                ('cos_video', models.PositiveIntegerField(blank=True, null=True)),
                ('message_context', models.CharField(blank=True, max_length=40, null=True)),
                ('force_avp', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('media_use_received_transport', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('accountcode', models.CharField(blank=True, max_length=80, null=True)),
                ('user_eq_phone', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('moh_passthrough', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('media_encryption_optimistic', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('rpid_immediate', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('g726_non_standard', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('rtp_keepalive', models.PositiveIntegerField(blank=True, null=True)),
                ('rtp_timeout', models.PositiveIntegerField(blank=True, null=True)),
                ('rtp_timeout_hold', models.PositiveIntegerField(blank=True, null=True)),
                ('bind_rtp_to_media_address', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('voicemail_extension', models.CharField(blank=True, max_length=40, null=True)),
                ('mwi_subscribe_replaces_unsolicited', models.CharField(blank=True, help_text='ast_bool_values', max_length=200, null=True)),
                ('acl', models.CharField(blank=True, max_length=40, null=True)),
                ('contact_deny', models.CharField(blank=True, max_length=95, null=True)),
                ('contact_permit', models.CharField(blank=True, max_length=95, null=True)),
                ('contact_acl', models.CharField(blank=True, max_length=40, null=True)),
                ('subscribe_context', models.CharField(blank=True, max_length=40, null=True)),
                ('uniqueid', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('fax_detect_timeout', models.PositiveIntegerField(blank=True, null=True)),
                ('contact_user', models.CharField(blank=True, max_length=80, null=True)),
                ('preferred_codec_only', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('asymmetric_rtp_codec', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('rtcp_mux', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('allow_overlap', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('refer_blind_progress', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('notify_early_inuse_ringing', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('max_audio_streams', models.PositiveIntegerField(blank=True, null=True)),
                ('max_video_streams', models.PositiveIntegerField(blank=True, null=True)),
                ('webrtc', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('dtls_fingerprint', models.CharField(blank=True, help_text='sha_hash_values', max_length=200, null=True)),
                ('incoming_mwi_mailbox', models.CharField(blank=True, max_length=40, null=True)),
                ('bundle', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('dtls_auto_generate_cert', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('follow_early_media_fork', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('accept_multiple_sdp_answers', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('suppress_q850_reason_headers', models.CharField(blank=True, choices=[('yes', 'yes'), ('no', 'no')], max_length=3, null=True)),
                ('trust_connected_line', models.CharField(blank=True, help_text='ast_bool_values', max_length=200, null=True)),
                ('send_connected_line', models.CharField(blank=True, help_text='ast_bool_values', max_length=200, null=True)),
                ('ignore_183_without_sdp', models.CharField(blank=True, help_text='ast_bool_values', max_length=200, null=True)),
                ('send_history_info', models.CharField(blank=True, help_text='ast_bool_values', max_length=200, null=True)),
                ('context', models.ForeignKey(db_column='context', max_length=200, on_delete=django.db.models.deletion.CASCADE, to='pbx.contexts')),
            ],
            options={
                'db_table': 'ps_endpoints',
            },
        ),
    ]
